{"version":3,"sources":["SeasonDisplay.js","Loader.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Loader","class","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","React","Component","ReactDOM","render","document","querySelector"],"mappings":"+LAIMA,G,MAAe,CACrBC,OAAQ,CACJC,KAAM,wBACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,gBACNC,SAAU,eAyBCE,EAbM,SAACC,GAClB,IATcC,EAAKC,EASbC,GATQF,EASUD,EAAMC,KATXC,GASe,IAAIE,MAAOC,YARrC,GAAKH,EAAO,EACZD,EAAK,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIF,EAEFP,EAAaS,GAA9BP,EAFmB,EAEnBA,KAAKC,EAFc,EAEdA,SAChB,OACA,yBAAKS,UAAS,yBAAoBH,IAClC,uBAAGG,UAAS,6BAAwBT,EAAxB,WACT,4BAAKD,GACR,uBAAGU,UAAS,4BAAuBT,EAAvB,aC5BNU,EAAQ,SAACP,GACf,OACI,yBAAKQ,MAAM,oBACX,yBAAKA,MAAM,kBAAkBR,EAAMS,WAKvCF,EAAOG,aAAc,CACjBD,QAAS,eAIEF,QCVTI,E,4MACNC,MAAQ,CAACX,IAAK,KAAOY,aAAc,M,kEAGd,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAAAC,GACE,EAAKC,SAAU,CAAClB,IAAKiB,EAASE,OAAOC,cAEvC,SAAAC,GACE,EAAKH,SAAS,CAACN,aAAcS,EAAIb,e,+BAOtC,OAAGc,KAAKX,MAAMX,MAAQsB,KAAKX,MAAMC,aACxB,kBAAC,EAAD,CAAeZ,IAAMsB,KAAKX,MAAMX,OAGnCsB,KAAKX,MAAMX,KAAOsB,KAAKX,MAAMC,aACxB,uCAAaU,KAAKX,MAAMC,aAAxB,KAEH,kBAAE,EAAF,CAASJ,QAAQ,sC,GAxBRe,IAAMC,WA6BxBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,cAAc,W","file":"static/js/main.99467a5e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SeasonDisplay.css' ;\r\n\r\n\r\nconst seasonConfig = {\r\nsummer: {\r\n    text: 'its too hot over here',\r\n    iconName: 'sun'\r\n},\r\nwinter: {\r\n    text: 'damn its cold',\r\n    iconName: 'snowflake'\r\n},\r\n};\r\n\r\nconst getSeason =(lat, month) =>{\r\n if (month >2 && month <9 ){\r\n     return lat >0 ? 'summer' : 'winter' ;\r\n }else {\r\n    return lat > 0 ? 'winter' : 'summer' ;\r\n }\r\n};\r\n\r\nconst SeasonDisplay =(props)=>{\r\n    const season =getSeason(props.lat,new Date().getMonth()) ;\r\n    const {text,iconName} = seasonConfig[season];\r\nreturn (\r\n<div className={`season-display ${season}`}>\r\n<i className={`icon-right massive ${iconName} icon`} />\r\n   <h1>{text}</h1> \r\n<i className={`icon-left massive ${iconName} icon`} />\r\n    </div>\r\n\r\n);\r\n};\r\n\r\nexport default SeasonDisplay;","import React from 'react';\r\n\r\nconst Loader =(props)=>{\r\nreturn (\r\n    <div class=\"ui active dimmer\">\r\n    <div class=\"ui text loader\">{props.message}</div>\r\n  </div>\r\n)\r\n\r\n};\r\nLoader.defaultProps ={\r\n    message: 'Loading....'\r\n};\r\n\r\n\r\nexport default Loader ;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SeasonDisplay from './SeasonDisplay';\r\nimport Loader from './Loader';\r\n\r\nclass App extends React.Component{\r\nstate = {lat: null , errorMessage: null};\r\n \r\n\r\n componentDidMount(){\r\n  window.navigator.geolocation.getCurrentPosition(\r\n    position => {\r\n      this.setState ({lat: position.coords.latitude});\r\n    },\r\n    err => {\r\n      this.setState({errorMessage: err.message});\r\n    }\r\n  );\r\n }\r\n\r\n\r\nrender(){\r\n if(this.state.lat && !this.state.errorMessage) {\r\n   return <SeasonDisplay lat ={this.state.lat}/>\r\n }\r\n\r\n   if(!this.state.lat && this.state.errorMessage){\r\n    return  <div>Error: {this.state.errorMessage} </div>;\r\n }\r\n return  < Loader message=\"Please allow location request\"/>;\r\n};\r\n\r\n};\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.querySelector(\"#root\")\r\n);"],"sourceRoot":""}